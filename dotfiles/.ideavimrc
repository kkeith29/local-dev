""" Non IdeaVim keymaps required
" <c-h> Left
" <c-j> Down
" <c-k> Up
" <c-l> Right
" <c-q> Hide Active Tool Window

""" leader key (must be set early for plugins)
let mapleader = ' '

" plugins
set surround
set commentary
set highlightedyank
set ReplaceWithRegister
set NERDTree
set argtextobj
set textobj-entire
set easymotion
set vim-paragraph-motion
set exchange
set ideamarks
set matchit

" common settings
set scrolloff=8
set sidescrolloff=8
set incsearch
set showmode
set relativenumber
set number
set visualbell
set noerrorbells
set iskeyword+=$

" idea settings
set ideajoin
set idearefactormode=keep

" plugin settings
let g:NERDTreeMapActivateNode='l'
let g:NERDTreeMapJumpParent='h'

let g:EasyMotion_do_mapping = 0

let g:argtextobj_pairs="[:],(:),<:>"

let g:highlightedyank_highlight_duration = 500

""" key mappings

" easy control over ideavimrc file
nnoremap \e :e ~/.ideavimrc<CR>
nmap \r <Action>(IdeaVim.ReloadVimRc.reload)

" global bindings
sethandler <c-a> a:vim
sethandler <c-x> a:vim
sethandler <c-j> a:vim
sethandler <c-k> a:vim
nnoremap U <C-r>
nnoremap H ^
vnoremap H ^
nnoremap L $
vnoremap L $
nnoremap Y y$
nnoremap + <c-a>
vnoremap + <c-a>
nnoremap - <c-x>
vnoremap - <c-x>
nnoremap <c-j> <c-d>
nnoremap <c-k> <c-u>
inoremap <c-j> <Down>
inoremap <c-k> <Up>
nmap s <Plug>(easymotion-sn)

" update actions to not change buffer
nnoremap c "_c
vnoremap c "_c
nnoremap x "_x
nnoremap d "_d
vnoremap d "_d
nnoremap D "_D
vnoremap D "_D

" highlight selection again after ident
vnoremap < <gv
vnoremap > >gv

" maintain cursor position when yanking a visual selection
vnoremap y myy`y
vnoremap Y myY`y

" keep it centered
nnoremap n nzz
nnoremap N Nzz
nnoremap J mzJ`z

" system clipboard
vnoremap <Leader>y "+y
vnoremap <Leader>d "+d
nnoremap <Leader>y "+yy
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P
vnoremap <Leader>p "+p
vnoremap <Leader>P "+P

""" tab management
nmap <Leader>q <Action>(CloseEditor)
nmap <Leader>Q <Action>(CloseAllEditors)
nmap <Leader>X <Action>(CloseAllEditorsButActive)
nnoremap <Leader>w :write<CR>

" tab navigation
sethandler <c-h> a:vim
sethandler <c-l> a:vim
nmap <c-h> <Action>(PreviousTab)
nmap <c-l> <Action>(NextTab)

" tab pane splitting
sethandler <c-w> a:vim
nmap <c-w>s <Action>(SplitVertically)
nmap <c-w>S <Action>(SplitHorizontally)
nmap <c-w>q <Action>(Unsplit)

" tab movements between groups
nmap <c-w>mh <Action>(MoveTabLeft)
nmap <c-w>mj <Action>(MoveTabDown)
nmap <c-w>mk <Action>(MoveTabUp)
nmap <c-w>ml <Action>(MoveTabRight)
nmap <c-w>mo <Action>(MoveEditorToOppositeTabGroup)

""" file navigation and management (prefix f = file)
nmap <Leader>ff :NERDTreeFind<CR>
nmap <Leader>fe <Action>(ActivateProjectToolWindow)
nmap <Leader>fp <Action>(RecentFiles)
nmap <Leader>fo <Action>(GotoFile)
nmap <Leader>fr <Action>(RenameFile)
nmap <Leader>fs <Action>(FindInPath)
nmap <Leader>fS <Action>(ReplaceInPath)
nmap <Leader>fw <Action>(ActivateFindToolWindow)

""" editor actions
nmap <Leader>eW <Action>(HideAllWindows)
nmap <Leader>ed <Action>(ActivateDatabaseToolWindow)
nmap <Leader>es <Action>(ActivateServicesToolWindow)
nmap <Leader>el <Action>(JumpToLastWindow)
nmap <Leader>eq <Action>(Jdbc.OpenConsole.Any)
nmap <Leader>z <Action>(ToggleDistractionFreeMode)

""" project actions
nmap <Leader>po <Action>(OpenFile)
nmap <Leader>pr <Action>(ManageRecentProjects)

""" code navigation (prefix g = go)
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)
nmap gw <Plug>(easymotion-bd-wl)
nmap gu <Action>(FindUsages)
nmap gd <Action>(GotoDeclaration)
nmap gl <Plug>(easymotion-bd-jk)
nmap gi <Action>(GotoImplementation)
nmap gp <Action>(GotoSuperMethod)
nmap ge <Action>(GotoNextError)
nmap gE <Action>(GotoPreviousError)
nmap gt <Action>(GotoTest)
nmap gb <Action>(Back)
nmap gf <Action>(Forward)
nmap gs <Action>(Switcher)

""" code editing/refactoring (prefix c = code)
nmap <Leader>ca <Action>(ShowIntentionActions)
nmap <Leader>cc <Action>(CommentByLineComment)
vmap <Leader>cc <Action>(CommentByLineComment)
nmap <Leader>cm <Action>(Move)
nmap <Leader>cr <Action>(RenameElement)
vmap <Leader>cu :!ld-cli code:use-formatter<CR>
nmap <Leader>cg :%!ld-cli code:generate %<CR>
nmap <Leader>cs <Action>(FileStructurePopup)

""" code running and debugging (prefix t = test)
nmap <Leader>tc <Action>(ContextRun)
nmap <Leader>tr <Action>(Rerun)
nmap <Leader>tf <Action>(RerunFailedTests)
nmap <Leader>td <Action>(ContextDebug)
nmap <Leader>tm <Action>(ChooseRunConfiguration)
nmap <Leader>tw <Action>(ActivateRunToolWindow)

""" code debugging (prefix d = debug)
nmap <Leader>dbt <Action>(ToggleLineBreakpoint)
nmap <Leader>dc <Action>(Resume)
nmap <Leader>dl <Action>(PhpListenDebugAction)
nmap <Leader>dm <Action>(XDebugger.MuteBreakpoints)
nmap <Leader>dso <Action>(StepOver)
nmap <Leader>dsi <Action>(StepInto)
nmap <Leader>dsI <Action>(StepOut)
nmap <Leader>dsf <Action>(ForceStepIn)
nmap <Leader>du <Action>(ActivateDebugToolWindow)

""" code folding
nmap zc <Action>(CollapseRegion)
nmap zo <Action>(ExpandRegion)
nmap zC <Action>(CollapseAllRegions)
nmap zO <Action>(ExpandAllRegions)

""" run (prefix r = run)
nmap <Leader>rq <Action>(Console.Jdbc.Execute)

""" version control
nmap <Leader>va <Action>(Git.Add)
nmap <Leader>vb <Action>(Annotate)
