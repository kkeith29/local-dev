set scrolloff=8
set sidescrolloff=8
set incsearch
set showmode
set idearefactormode=keep
set relativenumber
set number
set surround
set commentary
set visualbell
set noerrorbells
set iskeyword+=$

" NERDTree settings
set NERDTree
let g:NERDTreeMapActivateNode='l'
let g:NERDTreeMapJumpParent='h'

""" key mappings
let mapleader = ' '

" easy control over ideavimrc file
nnoremap \e :e ~/.ideavimrc<CR>
nmap \r <Action>(IdeaVim.ReloadVimRc.reload)

" global bindings
map Q gq
nnoremap U <C-r>
nnoremap H ^
vnoremap H ^
nnoremap L $
vnoremap L $

" update deletes to not change buffer
nnoremap d "_d
vnoremap d "_d

" update cut in normal mode to not change buffer
nnoremap x "_x

" make Y behave like other capitals
nnoremap Y y$

" highlight selection again after ident
vnoremap < <gv
vnoremap > >gv

" maintain cursor position when yanking a visual selection
vnoremap y myy`y
vnoremap Y myY`y

" keep it centered
nnoremap n nzz
nnoremap N Nzz
nnoremap J mzJ`z

" system clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>y "+yy
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

""" tool navigation (prefix w = window)
nmap <Leader>wp <Action>(ActivateProjectToolWindow)
nmap <Leader>wt <Action>(ActivateTerminalToolWindow)
nmap <Leader>wd <Action>(ActivateDebugToolWindow)
nmap <Leader>wn <Action>(ActivateNotificationsToolWindow)
nmap <Leader>wf <Action>(ActivateFindToolWindow)
nmap <Leader>wr <Action>(ActivateRunToolWindow)
nmap <Leader>wq <Action>(HideAllWindows)

""" tab management
nmap <Leader>q <Action>(CloseAllEditors)

" tab navigation (prefix t = tab)
nmap <TAB> <Action>(NextTab)
nmap <s-TAB> <Action>(PreviousTab)

" tab movements
nmap <Leader>th <Action>(MoveTabLeft)
nmap <Leader>tj <Action>(MoveTabDown)
nmap <Leader>tk <Action>(MoveTabUp)
nmap <Leader>tl <Action>(MoveTabRight)
nmap <Leader>tm <Action>(MoveEditorToOppositeTabGroup)

" tab closing
nmap <Leader>tq <Action>(CloseContent)
nmap <Leader>tQ <Action>(CloseAllEditorsButActive)

" tab pane splitting
nmap <c-\> <Action>(SplitVertically)
nmap <c--> <Action>(SplitHorizontally)
nmap <c-=> <Action>(Unsplit)

" tab pane movements
sethandler <c-j> a:vim
sethandler <c-k> a:vim
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k

""" file navigation and management (prefix f = file)
nmap <Leader>ff :NERDTreeFind<CR>
nmap <Leader>fr <Action>(RenameFile)
nmap <Leader>fs <Action>(FileStructurePopup)

""" editor actions (prefix e = editor)
nmap <Leader>ea <Action>(ShowIntentionActions)
nnoremap <Leader>ew :write<CR>
nmap <Leader>ef <Action>(ToggleFullScreen)
nmap <Leader>ep <Action>(TogglePresentationMode)

""" code navigation (prefix g = go)
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)
nmap go <Action>(GotoFile)
nmap gu <Action>(FindUsages)
nmap gd <Action>(GotoDeclaration)
nmap gi <Action>(GotoImplementation)
nmap gp <Action>(GotoSuperMethod)
nmap ge <Action>(GotoNextError)
nmap gE <Action>(GotoPreviousError)
nmap gt <Action>(GotoTest)
nmap gb <Action>(Back)
nmap gf <Action>(Forward)
nmap gs <Action>(Switcher)

""" code editing/refactoring (prefix c = code)
nmap <Leader>cc <Action>(CommentByLineComment)
vmap <Leader>cc <Action>(CommentByLineComment)
nmap <Leader>cm <Action>(Move)
nmap <Leader>cr <Action>(RenameElement)
vmap <Leader>cu :!ld-cli code:use-formatter<CR>

""" code running and debugging (prefix r = run)
nmap <Leader>rc <Action>(ContextRun)
nmap <Leader>rr <Action>(Rerun)
nmap <Leader>rf <Action>(RerunFailedTests)
nmap <Leader>rd <Action>(ContextDebug)
nmap <Leader>rm <Action>(ChooseRunConfiguration)

""" code debugging (prefix d = debug)
nmap <Leader>db <Action>(ToggleLineBreakpoint)
nmap <Leader>dr <Action>(Resume)
nmap <Leader>dm <Action>(XDebugger.MuteBreakpoints)
nmap <Leader>so <Action>(StepOver)
nmap <Leader>si <Action>(StepInto)
nmap <Leader>sI <Action>(StepOut)
nmap <Leader>sf <Action>(ForceStepIn)

""" version control
nmap <Leader>va <Action>(Git.Add)

""" searching (prefix g = global)
nmap g/ <Action>(FindInPath)
nmap gr <Action>(ReplaceInPath)
